
Optical_Wheel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000004aa  0000053e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010c  0080010c  0000054a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b3  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018c  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000409  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026d  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000476  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  9e:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  a6:	ef 92       	push	r14
  a8:	0f 93       	push	r16
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	2d 97       	sbiw	r28, 0x0d	; 13
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	9c 83       	std	Y+4, r25	; 0x04
  c0:	8b 83       	std	Y+3, r24	; 0x03
  c2:	6d 83       	std	Y+5, r22	; 0x05
  c4:	4e 83       	std	Y+6, r20	; 0x06
  c6:	2f 83       	std	Y+7, r18	; 0x07
  c8:	08 87       	std	Y+8, r16	; 0x08
  ca:	e9 86       	std	Y+9, r14	; 0x09
  cc:	81 ec       	ldi	r24, 0xC1	; 193
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	28 e1       	ldi	r18, 0x18	; 24
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	9c 81       	ldd	r25, Y+4	; 0x04
  da:	9c 01       	movw	r18, r24
  dc:	99 0f       	add	r25, r25
  de:	44 0b       	sbc	r20, r20
  e0:	55 0b       	sbc	r21, r21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e2:	80 ed       	ldi	r24, 0xD0	; 208
  e4:	92 e1       	ldi	r25, 0x12	; 18
  e6:	a3 e1       	ldi	r26, 0x13	; 19
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	bc 01       	movw	r22, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ec:	cd 01       	movw	r24, r26
  ee:	0e 94 31 02 	call	0x462	; 0x462 <__udivmodsi4>
  f2:	da 01       	movw	r26, r20
  f4:	c9 01       	movw	r24, r18
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	85 ec       	ldi	r24, 0xC5	; 197
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	3a 81       	ldd	r19, Y+2	; 0x02
 104:	23 2f       	mov	r18, r19
 106:	33 27       	eor	r19, r19
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
 10c:	84 ec       	ldi	r24, 0xC4	; 196
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	29 81       	ldd	r18, Y+1	; 0x01
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	29 f4       	brne	.+10     	; 0x126 <uart_init+0x80>
 11c:	80 ec       	ldi	r24, 0xC0	; 192

void lcd_char(char data){
	char temp = data;
	PORTD = 0x40;
	_delay_ms(5);
	data = ( (data & 0xF0) >> 4) | 0xC0;	//Write Upper Nibble (RS=1) E --> 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	22 e0       	ldi	r18, 0x02	; 2
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	8e 81       	ldd	r24, Y+6	; 0x06
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	87 30       	cpi	r24, 0x07	; 7
 12e:	91 05       	cpc	r25, r1
 130:	b1 f0       	breq	.+44     	; 0x15e <uart_init+0xb8>
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	91 05       	cpc	r25, r1
 136:	1c f4       	brge	.+6      	; 0x13e <uart_init+0x98>
 138:	06 97       	sbiw	r24, 0x06	; 6
	PORTD = data;
 13a:	39 f0       	breq	.+14     	; 0x14a <uart_init+0xa4>
 13c:	2e c0       	rjmp	.+92     	; 0x19a <uart_init+0xf4>
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	91 05       	cpc	r25, r1
 142:	b9 f0       	breq	.+46     	; 0x172 <uart_init+0xcc>
 144:	09 97       	sbiw	r24, 0x09	; 9
 146:	f9 f0       	breq	.+62     	; 0x186 <uart_init+0xe0>
 148:	28 c0       	rjmp	.+80     	; 0x19a <uart_init+0xf4>
 14a:	82 ec       	ldi	r24, 0xC2	; 194
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	22 ec       	ldi	r18, 0xC2	; 194
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	22 60       	ori	r18, 0x02	; 2
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 15c:	1e c0       	rjmp	.+60     	; 0x19a <uart_init+0xf4>
 15e:	82 ec       	ldi	r24, 0xC2	; 194
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	22 ec       	ldi	r18, 0xC2	; 194
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	24 60       	ori	r18, 0x04	; 4
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
 170:	14 c0       	rjmp	.+40     	; 0x19a <uart_init+0xf4>
 172:	82 ec       	ldi	r24, 0xC2	; 194
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	22 ec       	ldi	r18, 0xC2	; 194
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
	if (__tmp < 1.0)
 17c:	20 81       	ld	r18, Z
 17e:	26 60       	ori	r18, 0x06	; 6
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	0a c0       	rjmp	.+20     	; 0x19a <uart_init+0xf4>
 186:	82 ec       	ldi	r24, 0xC2	; 194
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	22 ec       	ldi	r18, 0xC2	; 194
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	f9 01       	movw	r30, r18
 190:	20 81       	ld	r18, Z
 192:	2e 60       	ori	r18, 0x0E	; 14
		__ticks = 1;
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18
 198:	00 00       	nop
 19a:	8f 81       	ldd	r24, Y+7	; 0x07
 19c:	88 23       	and	r24, r24
	else if (__tmp > 65535)
 19e:	49 f4       	brne	.+18     	; 0x1b2 <uart_init+0x10c>
 1a0:	82 ec       	ldi	r24, 0xC2	; 194
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	22 ec       	ldi	r18, 0xC2	; 194
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	20 81       	ld	r18, Z
 1ac:	20 62       	ori	r18, 0x20	; 32
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	8f 81       	ldd	r24, Y+7	; 0x07
 1b4:	81 30       	cpi	r24, 0x01	; 1
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b6:	49 f4       	brne	.+18     	; 0x1ca <uart_init+0x124>
 1b8:	82 ec       	ldi	r24, 0xC2	; 194
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	22 ec       	ldi	r18, 0xC2	; 194
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f9 01       	movw	r30, r18
 1c2:	20 81       	ld	r18, Z
 1c4:	20 63       	ori	r18, 0x30	; 48
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
 1ca:	88 85       	ldd	r24, Y+8	; 0x08
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	29 f4       	brne	.+10     	; 0x1da <uart_init+0x134>
 1d0:	82 ec       	ldi	r24, 0xC2	; 194
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	28 e0       	ldi	r18, 0x08	; 8
 1d6:	fc 01       	movw	r30, r24
 1d8:	20 83       	st	Z, r18
 1da:	89 85       	ldd	r24, Y+9	; 0x09
 1dc:	88 23       	and	r24, r24
 1de:	49 f0       	breq	.+18     	; 0x1f2 <uart_init+0x14c>
 1e0:	81 ec       	ldi	r24, 0xC1	; 193
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	21 ec       	ldi	r18, 0xC1	; 193
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 68       	ori	r18, 0x80	; 128
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 1f2:	2d 96       	adiw	r28, 0x0d	; 13
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	0f 91       	pop	r16
 204:	ef 90       	pop	r14
 206:	08 95       	ret

00000208 <uart_char>:
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	00 00       	nop
 216:	80 ec       	ldi	r24, 0xC0	; 192
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	80 72       	andi	r24, 0x20	; 32
 224:	99 27       	eor	r25, r25
 226:	89 2b       	or	r24, r25
 228:	b1 f3       	breq	.-20     	; 0x216 <uart_char+0xe>
 22a:	86 ec       	ldi	r24, 0xC6	; 198
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	29 81       	ldd	r18, Y+1	; 0x01
	_delay_ms(5);
	data ^= 0x80;							//  E --> 0
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <uart_string>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <uart_string+0x6>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	9a 83       	std	Y+2, r25	; 0x02
	PORTD = data;
 248:	89 83       	std	Y+1, r24	; 0x01
 24a:	0b c0       	rjmp	.+22     	; 0x262 <uart_string+0x26>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	9c 01       	movw	r18, r24
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	3f 4f       	sbci	r19, 0xFF	; 255
 256:	3a 83       	std	Y+2, r19	; 0x02
 258:	29 83       	std	Y+1, r18	; 0x01
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	0e 94 04 01 	call	0x208	; 0x208 <uart_char>
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 26a:	88 23       	and	r24, r24
 26c:	79 f7       	brne	.-34     	; 0x24c <uart_string+0x10>
 26e:	0f 90       	pop	r0
 270:	0f 90       	pop	r0
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <__vector_4>:
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	00 90 5f 00 	lds	r0, 0x005F
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	8f 93       	push	r24
	if (__tmp < 1.0)
 28a:	9f 93       	push	r25
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	86 e2       	ldi	r24, 0x26	; 38
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	80 81       	ld	r24, Z
 2a0:	88 2f       	mov	r24, r24
		__ticks = 1;
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	81 70       	andi	r24, 0x01	; 1
 2a6:	99 27       	eor	r25, r25
 2a8:	89 2b       	or	r24, r25
 2aa:	99 f5       	brne	.+102    	; 0x312 <__vector_4+0x9a>
	else if (__tmp > 65535)
 2ac:	80 91 0c 01 	lds	r24, 0x010C
 2b0:	90 91 0d 01 	lds	r25, 0x010D
 2b4:	89 2b       	or	r24, r25
 2b6:	39 f5       	brne	.+78     	; 0x306 <__vector_4+0x8e>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 0d 01 	sts	0x010D, r25
 2c0:	80 93 0c 01 	sts	0x010C, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2c4:	84 e8       	ldi	r24, 0x84	; 132
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	fc 01       	movw	r30, r24
 2ca:	11 82       	std	Z+1, r1	; 0x01
 2cc:	10 82       	st	Z, r1
 2ce:	10 92 16 01 	sts	0x0116, r1
 2d2:	10 92 17 01 	sts	0x0117, r1
 2d6:	10 92 18 01 	sts	0x0118, r1
 2da:	10 92 19 01 	sts	0x0119, r1
 2de:	86 e3       	ldi	r24, 0x36	; 54
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	fc 01       	movw	r30, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	88 2f       	mov	r24, r24
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	82 70       	andi	r24, 0x02	; 2
 2ec:	99 27       	eor	r25, r25
 2ee:	89 2b       	or	r24, r25
 2f0:	81 f0       	breq	.+32     	; 0x312 <__vector_4+0x9a>
 2f2:	86 e3       	ldi	r24, 0x36	; 54
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	26 e3       	ldi	r18, 0x36	; 54
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	f9 01       	movw	r30, r18
 2fc:	20 81       	ld	r18, Z
 2fe:	22 60       	ori	r18, 0x02	; 2
 300:	fc 01       	movw	r30, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 302:	20 83       	st	Z, r18
 304:	06 c0       	rjmp	.+12     	; 0x312 <__vector_4+0x9a>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 0f 01 	sts	0x010F, r25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30e:	80 93 0e 01 	sts	0x010E, r24
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	00 92 5f 00 	sts	0x005F, r0
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_11>:
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	00 90 5f 00 	lds	r0, 0x005F
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
	_delay_ms(5);
	data = temp;
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	data = ( (data & 0x0F) ) | 0xC0;		//Write Lower Nibble (RS=1) E --> 1
 34a:	80 91 16 01 	lds	r24, 0x0116
 34e:	90 91 17 01 	lds	r25, 0x0117
 352:	a0 91 18 01 	lds	r26, 0x0118
 356:	b0 91 19 01 	lds	r27, 0x0119
 35a:	9c 5f       	subi	r25, 0xFC	; 252
 35c:	af 4f       	sbci	r26, 0xFF	; 255
 35e:	bf 4f       	sbci	r27, 0xFF	; 255
 360:	80 93 16 01 	sts	0x0116, r24
	PORTD = data;
 364:	90 93 17 01 	sts	0x0117, r25
 368:	a0 93 18 01 	sts	0x0118, r26
 36c:	b0 93 19 01 	sts	0x0119, r27
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	00 92 5f 00 	sts	0x005F, r0
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 386:	18 95       	reti

00000388 <main>:
 388:	ef 92       	push	r14
 38a:	0f 93       	push	r16
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	2e 97       	sbiw	r28, 0x0e	; 14
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <pcint1_init>
 3a4:	0e 94 11 02 	call	0x422	; 0x422 <tc1_init>
	if (__tmp < 1.0)
 3a8:	e1 2c       	mov	r14, r1
 3aa:	01 e0       	ldi	r16, 0x01	; 1
 3ac:	22 e0       	ldi	r18, 0x02	; 2
 3ae:	48 e0       	ldi	r20, 0x08	; 8
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	91 ee       	ldi	r25, 0xE1	; 225
 3b6:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
 3ba:	84 e2       	ldi	r24, 0x24	; 36
 3bc:	90 e0       	ldi	r25, 0x00	; 0
		__ticks = 1;
 3be:	24 e2       	ldi	r18, 0x24	; 36
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	f9 01       	movw	r30, r18
 3c4:	20 81       	ld	r18, Z
 3c6:	26 60       	ori	r18, 0x06	; 6
	else if (__tmp > 65535)
 3c8:	fc 01       	movw	r30, r24
 3ca:	20 83       	st	Z, r18
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	0e 94 1e 01 	call	0x23c	; 0x23c <uart_string>
 3d4:	19 82       	std	Y+1, r1	; 0x01
 3d6:	1a 82       	std	Y+2, r1	; 0x02
 3d8:	1b 82       	std	Y+3, r1	; 0x03
 3da:	1c 82       	std	Y+4, r1	; 0x04
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	91 e0       	ldi	r25, 0x01	; 1
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3e0:	0e 94 1e 01 	call	0x23c	; 0x23c <uart_string>
 3e4:	f7 cf       	rjmp	.-18     	; 0x3d4 <main+0x4c>

000003e6 <pcint1_init>:
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	87 e2       	ldi	r24, 0x27	; 39
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	27 e2       	ldi	r18, 0x27	; 39
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	f9 01       	movw	r30, r18
 3f8:	20 81       	ld	r18, Z
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 3fe:	88 e6       	ldi	r24, 0x68	; 104
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	28 e6       	ldi	r18, 0x68	; 104
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	22 60       	ori	r18, 0x02	; 2
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
 410:	8c e6       	ldi	r24, 0x6C	; 108
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
 41a:	78 94       	sei
 41c:	df 91       	pop	r29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <tc1_init>:
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	80 e8       	ldi	r24, 0x80	; 128
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	10 82       	st	Z, r1
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 432:	81 e8       	ldi	r24, 0x81	; 129
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	29 e0       	ldi	r18, 0x09	; 9
 438:	fc 01       	movw	r30, r24
 43a:	20 83       	st	Z, r18
 43c:	88 e8       	ldi	r24, 0x88	; 136
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	33 e0       	ldi	r19, 0x03	; 3
 444:	fc 01       	movw	r30, r24
 446:	31 83       	std	Z+1, r19	; 0x01
 448:	20 83       	st	Z, r18
 44a:	8f e6       	ldi	r24, 0x6F	; 111
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	2f e6       	ldi	r18, 0x6F	; 111
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	22 60       	ori	r18, 0x02	; 2
 458:	fc 01       	movw	r30, r24
	_delay_ms(5);
	data ^= 0x80;							//E --> 0
 45a:	20 83       	st	Z, r18
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <__udivmodsi4>:
 462:	a1 e2       	ldi	r26, 0x21	; 33
 464:	1a 2e       	mov	r1, r26
 466:	aa 1b       	sub	r26, r26
 468:	bb 1b       	sub	r27, r27
 46a:	fd 01       	movw	r30, r26
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__udivmodsi4_ep>

0000046e <__udivmodsi4_loop>:
 46e:	aa 1f       	adc	r26, r26
 470:	bb 1f       	adc	r27, r27
	PORTD = data;
 472:	ee 1f       	adc	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	a2 17       	cp	r26, r18
 478:	b3 07       	cpc	r27, r19
 47a:	e4 07       	cpc	r30, r20
 47c:	f5 07       	cpc	r31, r21
 47e:	20 f0       	brcs	.+8      	; 0x488 <__udivmodsi4_ep>
 480:	a2 1b       	sub	r26, r18
 482:	b3 0b       	sbc	r27, r19
 484:	e4 0b       	sbc	r30, r20
 486:	f5 0b       	sbc	r31, r21

00000488 <__udivmodsi4_ep>:
 488:	66 1f       	adc	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a 94       	dec	r1
 492:	69 f7       	brne	.-38     	; 0x46e <__udivmodsi4_loop>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 494:	60 95       	com	r22
 496:	70 95       	com	r23
 498:	80 95       	com	r24
 49a:	90 95       	com	r25
 49c:	9b 01       	movw	r18, r22
 49e:	ac 01       	movw	r20, r24
 4a0:	bd 01       	movw	r22, r26
 4a2:	cf 01       	movw	r24, r30
 4a4:	08 95       	ret

000004a6 <_exit>:
 4a6:	f8 94       	cli

000004a8 <__stop_program>:
 4a8:	ff cf       	rjmp	.-2      	; 0x4a8 <__stop_program>
